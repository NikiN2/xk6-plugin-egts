package egts

import (
	"testing"
	"time"

	"github.com/kuznetsovin/egts-protocol/app/egts"
	"github.com/stretchr/testify/assert"
)

func Test_createNavPacket(t *testing.T) {
	packet := createNavPacket(133552, time.Date(2018, time.July, 5, 20, 8, 53, 0, time.UTC), 55.55389399769574, 37.43236696287812)
	assert.Equal(t,
		[]byte{0x1, 0x0, 0x3, 0xb, 0x0, 0x23, 0x0, 0x1, 0x0, 0x1, 0x4, 0x18, 0x0, 0x1, 0x0, 0x99,
			0xb0, 0x9, 0x2, 0x0, 0x2, 0x2, 0x10, 0x15, 0x0, 0xd5, 0x3f, 0x1, 0x10, 0x6f, 0x1c, 0x5,
			0x9e, 0x7a, 0xb5, 0x3c, 0x35, 0x1, 0xd0, 0x87, 0x2c, 0x1, 0x0, 0x0, 0x0, 0x0, 0x5d, 0xfd},
		packet)

	p := egts.Package{}
	r, e := p.Decode(packet)
	if !assert.NoError(t, e) {
		assert.Equal(t, 0, r)
	}
}

func Test_createNavPacketWithSensor(t *testing.T) {
	packet := createNavPacketWithSensor(133552, time.Date(2018, time.July, 5, 20, 8, 53, 0, time.UTC), 55.55389399769574, 37.43236696287812, 1000)
	assert.Equal(t,
		[]byte{0x1, 0x0, 0x3, 0xb, 0x0, 0x41, 0x0, 0x2, 0x0, 0x1, 0x60, 0x36, 0x0, 0x2, 0x0, 0x99, 0xb0, 0x9, 0x2, 0x0, 0x2,
			0x2, 0x10, 0x15, 0x0, 0xd5, 0x3f, 0x1, 0x10, 0x6f, 0x1c, 0x5, 0x9e, 0x7a, 0xb5, 0x3c, 0x35, 0x1, 0xe8, 0x83, 0x2c,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x1b, 0x0, 0x0, 0x0, 0xff, 0xe8, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0xd3},
		packet)

	p := egts.Package{}
	r, e := p.Decode(packet)
	if !assert.NoError(t, e) {
		assert.Equal(t, 0, r)
	}
}

func Test_createNavPacketWithFuel(t *testing.T) {
	packet := createNavPacketWithFuel(133552, time.Date(2018, time.July, 5, 20, 8, 53, 0, time.UTC), 55.55389399769574, 37.43236696287812, 1000)
	assert.Equal(t,
		[]byte{0x1, 0x0, 0x3, 0xb, 0x0, 0x2d, 0x0, 0x3, 0x0, 0x1, 0x3e, 0x22, 0x0, 0x3, 0x0, 0x99, 0xb0,
			0x9, 0x2, 0x0, 0x2, 0x2, 0x10, 0x15, 0x0, 0xd5, 0x3f, 0x1, 0x10, 0x6f, 0x1c, 0x5, 0x9e, 0x7a,
			0xb5, 0x3c, 0x35, 0x1, 0xe8, 0x83, 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1b, 0x7, 0x0, 0x3, 0x1, 0x0,
			0xe8, 0x3, 0x0, 0x0, 0x68, 0xe9},
		packet)

	p := egts.Package{}
	r, e := p.Decode(packet)
	if !assert.NoError(t, e) {
		assert.Equal(t, 0, r)
	}
}
